{
  "name": "wildrtc",
  "version": "0.1.17",
  "description": "webrtc with wilddog support",
  "main": "src/WildRTC.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/WildDogTeam/lib-js-wildRTC.git"
  },
  "keywords": [
    "webrtc",
    "wilddog",
    "realtime",
    "p2p"
  ],
  "author": {
    "name": "wilddog"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/WildDogTeam/lib-js-wildRTC/issues"
  },
  "homepage": "https://github.com/WildDogTeam/lib-js-wildRTC.git",
  "devDependencies": {
    "browserify": "^13.0.0",
    "gulp": "^3.9.1",
    "gulp-browserify": "^0.5.1",
    "gulp-connect": "^3.1.0",
    "gulp-rename": "^1.2.2",
    "gulp-uglify": "^1.5.3"
  },
  "dependencies": {
    "wild-peerconnection": "^1.0.6"
  },
  "readme": "# lib-js-wildRTC - Wilddog 实现实时音视频聊天\n\n使用 [Wilddog](https://www.wilddog.com) 实现的实时音视频聊天库。\n\n野狗 wildRTC 项目的 [iOS SDK](https://cdn.wilddog.com/wildrtc/sdk/ios/WildRTC.framework-0.1.0.zip) 已经推出，Android SDK 即将推出。\n\n## 浏览器支持\n目前 wildRTC 可应用于以下 PC 端浏览器上：\n- Chrome: 23+\n- Firefox: 22+\n- Opera: 18+\n- Safari: 7.0+ (需要安装插件 & OSX 10.9+)\n\n移动端浏览器：\n- Android Browser: Android5.0+\n- Opera for Android\n- Chrome for Android\n- Firefox for Android\n\n## 在线示例\n\n我们提供了一个实例，登录到同一个房间的用户之间能够进行实时音视频聊天。\n\n[![演示截图](./docs/snapshot.png)](https://wildrtc.wilddogapp.com/)\n\n### 体验示例\n\n打开网页 https://wildrtc.wilddogapp.com ，输入房间名，进入房间。在同一房间的用户之间能够互相视频聊天。\n\n## 本地运行\n\n### 下载代码\n\n下载代码到本地，并进入`lib-js-wildRTC`目录\n\n\tgit clone https://github.com/WildDogTeam/lib-js-wildRTC.git\n\tcd lib-js-wildRTC\n\n### （可选）本地编译\n\n如果想要自己对源码进行修改，或者担心 wildrtc 的依赖库有更新，想要升级 wildrtc.js ，建议重新编译生成 wildrtc.js:\n\n\tnpm install\n\tgulp build\n\n注意：如果没有安装 npm 或 gulp，请安装。\n\n### 打开测试服务\n\n\tnode https_channel_server.js\n\n这会在本地 https://localhost:8080 建立一个 webserver，默认进入测试页面。\n\n备注：使用 https 服务是由于在 chrome 浏览器中，必须使用 https 服务才能调用本地摄像头和麦克风。\n\n### 进行测试\n\n界面截图：\n\n![演示截图1](./docs/test.png)\n\n在测试页面输入 Wilddog 的 AppId，打开摄像头。同一 AppId 的不同用户将进入同一聊天室。\n\n注意，由于 test.html 采用匿名登录，因此该 AppId 需要开启匿名登录功能。 \n\n## 下载\n\n要在你的工程中使用 WildRTC，你需要引用 cdn 中的 wildrtc.js ，或者将 lib 目录下的 wildrtc.js 拷贝到本地，并在你的 HTML 页面中引入以下文件：\n\n```html\n<!-- Wilddog -->\n<script src=\"https://cdn.wilddog.com/js/client/current/wilddog.js\"></script>\n\n<!-- WildRTC -->\n<script src=\"wildrtc.js\"></script>\n或\n<script>src=\"https://cdn.wilddog.com/wildrtc/sdk/web/current/wildrtc.js\"</script>\n```\n\n你也可以通过 npm 安装 WildRTC, 他们会自动下载依赖。\n\n```bash\n$ npm install wildrtc --save\n```\n\n## API 文档\n\n### 创建引用\n\n要使用 WildRTC，必须先创建 Wilddog 引用并登录或者匿名登录：\n\n```js\nvar ref = new Wilddog(\"https://<appId>.wilddogio.com/\");\nref.authAnonymously();\nref.onAuth(function(auth) {\n    if (auth != null) {\n        var rtc = new WildRTC(ref);\n    }\n}\n```\n\n<hr>\n\n### 加入会话\n\n创建 WildRTC 引用之后，就可以通过`join(callback)`进入会话：\n\n```js\nwildRTC.join(callback(err));\n```\n<hr>\n\n### 监听远端媒体流\n\n可以使用`on(type,callback,cancelCallback)`的事件监听来获取远端的媒体流。\n\n```js\nwildRTC.on(\"stream_added\",function(WildStream){\n\tconsole.log(WildStream.getId());\t//结果会在 console 中打印出远端 WildStream 的 id\n})\n```\n\n回调函数的参数是一个 WildStream 对象类型，调用它的`getStream()`函数得到媒体流。上边这个例子中，`stream_added`这个事件会在每次收到远端 WildStream 时被触发。\n\n同时，我们还提供`stream_removed`事件，用来监听远端停止发送 WildStream 的事件，并在回调函数中提供停止发送的远端WildStream 。\n\n<hr>\n\n### 获取本地媒体流\n\n我们提供`getLocalStream(options,callback,cancelCallback)`来获取本地媒体流。\n\n```js\nwildRTC.getLocalStream(options,function(WildStream){\n\tconsole.log(WildStream.getId());\t//结果会在 console 中打印出远端WildStream的Id\n}, function(err){\n\tconsole.log(err);\t\t\t//打印错误日志。\n})\n```\n\noptions 内容为设置获取媒体流的规格，为 JSON 字符串。可以传入`{\"video\":true|false, \"audio\":true|false}`来设置`video`和`audio`的开启情况。video 还可以设置帧率和分辨率，可以查看 docs 目录下的 API 文档。回调函数中的参数为 WildStream 对象类型。\n\n\n<hr>\n\n### 向远端发送媒体流\n\n拿到 WildStream 后，通过`addStream(wildStream)`向远端其他用户发送媒体流。\n\n```js\nwildRTC.addStream(wildStream);\n```\n\n<hr>\n\n### 媒体流与页面绑定\n\nWildStream 对象提供`bindToDOM(element)`快速将媒体流与页面绑定。\n\n```js\nvar self_view = document.getElementById('self_view');\nwildStream.bindToDOM(self_view);\n```\n\n[更多API文档](./docs/api.md)\n\n## 注册Wilddog\n\nWildRTC 需要使用 Wilddog 数据库，你可以在此[注册](https://www.wilddog.com/my-account/signup) Wilddog 账户。\n\n## TODO\n\n- getLocalStream 支持更详细的配置 ： 进行中\n- 多浏览器支持 ： 进行中\n\n## 支持\n如果在使用过程中有任何问题，请提 [issue](https://github.com/WildDogTeam/lib-js-wildRTC/issues) ，我会在 Github 上给予帮助。\n\n## 相关文档\n\n* [Wilddog 概览](https://z.wilddog.com/overview/introduction)\n* [JavaScript SDK快速入门](https://z.wilddog.com/web/quickstart)\n* [JavaScript SDK API](https://z.wilddog.com/web/api)\n* [下载页面](https://www.wilddog.com/download/)\n* [Wilddog FAQ](https://z.wilddog.com/questions)\n\n## License\nMIT\nhttp://wilddog.mit-license.org/\n\n## 感谢 Thanks\n\nlib-js-wildRTC is built on and with the aid of several projects. We would like to thank the following projects for helping us achieve our goals:\n\nOpen Source:\n\n* [JQuery](http://jquery.com) The Write Less, Do More, JavaScript Library\n* [OpenWebRTC](http://www.openwebrtc.org/) A mobile-first WebRTC client framework for building native apps\n* [WebRTC](https://webrtc.org/) WebRTC is a free, open project that provides browsers and mobile applications with Real-Time Communications (RTC) capabilities via simple APIs\n\n",
  "readmeFilename": "README.md",
  "gitHead": "71af8cb6ecf9701d9f572521f1ed7616884c15ab",
  "_id": "wildrtc@0.1.17",
  "_shasum": "c45d2c4f64874a98cd4fb7e4d934f3582eaa2d4c",
  "_from": "wildrtc@>=0.1.3 <0.2.0"
}
